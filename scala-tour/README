
The idea here is explore the the Scala languague based on the Odersky's post where he piont out some 'levels'.

I'm not here to discuss if that structure is the best organization of the levels or not. To be honest, I don't care.


I just wanna a reference to START learn and is that what the post gives to us. So, let's go for it.


URL: http://www.scala-lang.org/node/8610

Levels:

Level A1: Beginning application programmer
  - Java-like statements and expressions: standard operators, method calls, conditionals, loops, try/catch
  - class, object, def, val, var, import, package
  - Infix notation for method calls
  - Simple closures
  - Collections with map, filter, etc
  - for-expressions

Level A2: Intermediate application programmer
  - Pattern matching
  - Trait composition
  - Recursion, in particular tail recursion
  - XML literals

Level A3: Expert application programmer
  - Folds, i.e. methods such as foldLeft, foldRight
  - Streams and other lazy data structures
  - Actors
  - Combinator parsers

Level L1: Junior library designer
  - Type parameters
  - Traits
  - Lazy vals
  - Control abstraction, currying
  - By-name parameters

Level L2: Senior library designer
  - Variance annotations
  - Existential types (e.g., to interface with Java wildcards)
  - Self type annotations and the cake pattern for dependency injection
  - Structural types (aka static duck typing)
  - Defining map/flatmap/withFilter for new kinds of for-expressions
  - Extractors

Level L3: Expert library designer
  - Early initializers
  - Abstract types
  - Implicit definitions
  - Higher-kinded types








